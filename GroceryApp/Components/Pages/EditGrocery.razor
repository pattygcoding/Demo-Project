@page "/groceries/edit/{id:int}"
@using GroceryApp.Services
@using GroceryApp.Models.DTOs
@using GroceryApp.Models
@inject IGroceryService GroceryService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Edit Grocery Item</PageTitle>

@if (grocery == null)
{
    <p><em>Loading...</em></p>
}
else if (notFound)
{
    <div class="alert alert-danger">
        <h4>Not Found</h4>
        <p>The grocery item you are trying to edit could not be found.</p>
        <a href="/groceries" class="btn btn-primary">Back to Groceries</a>
    </div>
}
else
{
    <h1>Edit @grocery.Name</h1>

    <div class="row">
        <div class="col-md-6">
            <EditForm Model="@updateModel" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <InputText id="name" class="form-control" @bind-Value="updateModel.Name" />
                    <ValidationMessage For="() => updateModel.Name" />
                </div>

                <div class="mb-3">
                    <label for="category" class="form-label">Category</label>
                    <InputSelect id="category" class="form-control" @bind-Value="updateModel.Category">
                        <option value="">Select a category...</option>
                        @foreach (var category in Enum.GetValues<Category>())
                        {
                            <option value="@category">@category</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => updateModel.Category" />
                </div>

                <div class="mb-3">
                    <label for="price" class="form-label">Price</label>
                    <InputNumber id="price" class="form-control" @bind-Value="updateModel.Price" 
                                 step="0.01" min="0.01" />
                    <ValidationMessage For="() => updateModel.Price" />
                </div>

                <div class="mb-3">
                    <label for="costToProduce" class="form-label">Cost to Produce</label>
                    <InputNumber id="costToProduce" class="form-control" @bind-Value="updateModel.CostToProduce" 
                                 step="0.01" min="0.01" />
                    <ValidationMessage For="() => updateModel.CostToProduce" />
                </div>

                <div class="mb-3">
                    <label for="stock" class="form-label">Stock</label>
                    <InputNumber id="stock" class="form-control" @bind-Value="updateModel.Stock" />
                    <ValidationMessage For="() => updateModel.Stock" />
                </div>

                <div class="mb-3">
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                    <a href="/groceries/@Id" class="btn btn-secondary ms-2">Cancel</a>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter] public int Id { get; set; }
    
    private GroceryItemDto? grocery;
    private UpdateGroceryItemDto updateModel = new();
    private bool notFound = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadGrocery();
    }

    private async Task LoadGrocery()
    {
        grocery = await GroceryService.GetGroceryByIdAsync(Id);
        if (grocery == null)
        {
            notFound = true;
            return;
        }

        // Map to update model
        updateModel = new UpdateGroceryItemDto
        {
            Name = grocery.Name,
            Category = grocery.Category,
            Price = grocery.Price,
            CostToProduce = grocery.CostToProduce,
            Stock = grocery.Stock
        };
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var result = await GroceryService.UpdateGroceryAsync(Id, updateModel);
            if (result != null)
            {
                Navigation.NavigateTo($"/groceries/{Id}");
            }
            else
            {
                notFound = true;
            }
        }
        catch (Exception ex)
        {
            // Handle error - in a real app you'd want better error handling
            Console.WriteLine($"Error updating grocery item: {ex.Message}");
        }
    }
}