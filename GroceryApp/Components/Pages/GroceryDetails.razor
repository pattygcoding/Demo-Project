@page "/groceries/{id:int}"
@using GroceryApp.Services
@using GroceryApp.Models.DTOs
@inject IGroceryService GroceryService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>@(grocery?.Name ?? "Grocery Item")</PageTitle>

@if (grocery == null)
{
    <p><em>Loading...</em></p>
}
else if (notFound)
{
    <div class="alert alert-danger">
        <h4>Not Found</h4>
        <p>The grocery item you are looking for could not be found.</p>
        <a href="/groceries" class="btn btn-primary">Back to Groceries</a>
    </div>
}
else
{
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>@grocery.Name</h1>
        <div>
            <a href="/groceries/edit/@grocery.Id" class="btn btn-outline-primary me-2">Edit</a>
            <a href="/groceries/delete/@grocery.Id" class="btn btn-outline-danger">Delete</a>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <dl class="row">
                        <dt class="col-sm-4">Name</dt>
                        <dd class="col-sm-8">@grocery.Name</dd>

                        <dt class="col-sm-4">Category</dt>
                        <dd class="col-sm-8">
                            <span class="badge bg-secondary">@grocery.Category</span>
                        </dd>

                        <dt class="col-sm-4">Price</dt>
                        <dd class="col-sm-8">$@grocery.Price.ToString("F2")</dd>

                        <dt class="col-sm-4">Cost to Produce</dt>
                        <dd class="col-sm-8">$@grocery.CostToProduce.ToString("F2")</dd>

                        <dt class="col-sm-4">Profit Margin</dt>
                        <dd class="col-sm-8">$@((grocery.Price - grocery.CostToProduce).ToString("F2"))</dd>

                        <dt class="col-sm-4">Stock</dt>
                        <dd class="col-sm-8">
                            @if (grocery.Stock > 0)
                            {
                                <span class="badge bg-success">@grocery.Stock in stock</span>
                            }
                            else
                            {
                                <span class="badge bg-danger">Out of stock</span>
                            }
                        </dd>

                        <dt class="col-sm-4">Created</dt>
                        <dd class="col-sm-8">@grocery.CreatedUtc.ToString("MMM d, yyyy 'at' h:mm tt")</dd>
                    </dl>
                </div>
            </div>
        </div>
    </div>

    <div class="mt-3">
        <a href="/groceries" class="btn btn-secondary">Back to List</a>
    </div>
}

@code {
    [Parameter] public int Id { get; set; }
    
    private GroceryItemDto? grocery;
    private bool notFound = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadGrocery();
    }

    private async Task LoadGrocery()
    {
        grocery = await GroceryService.GetGroceryByIdAsync(Id);
        notFound = grocery == null;
    }
}